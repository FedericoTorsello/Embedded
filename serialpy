#!/usr/bin/env python3
import importlib.util
import serial

spec = importlib.util.spec_from_file_location(
        "LineReader",
        "./modules/serial/threaded/__init__.py")
serialThread = importlib.util.module_from_spec(spec)
spec.loader.exec_module(serialThread)

arduino = serial.Serial(
            "/dev/ttyACM0", 9600,
            parity=serial.PARITY_NONE,
            stopbits=serial.STOPBITS_ONE,
            bytesize=serial.EIGHTBITS,
            timeout=1
        )


class ReaderThread:
    workerReader = None

    def __init__(self):
        self.workerReder = serialThread.ReaderThread(arduino, PrintLines)

    def start(self):
        if self.workerReader is not None:
            self.workerReader.start()

if __name__ == '__main__':
    import time
    import traceback

    class PrintLines(serialThread.LineReader):
        def connection_made(self, transport):
            super(PrintLines, self).connection_made(transport)

        def handle_line(self, data):
            print(repr(data))

        def connection_lost(self, exc):
            if exc:
                traceback.print_exc(exc)
            print('port closed\n')

    ser = serial.serial_for_url('/dev/ttyACM0', baudrate=9600, timeout=1)
    Work = serialThread.ReaderThread(ser, PrintLines)
    Work.start()

    while True:
        print("OK")
        time.sleep(1)
    Work.join()
